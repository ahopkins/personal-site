import{S as ti,i as si,s as ni,k as s,q as l,l as n,m as o,r as i,h as t,n as c,b as r,G as a,A as Ao,X as Ei,a as u,v as yi,c as h,w as gi,x as Si,f as ji,t as xi,y as Ai}from"./index-93917c68.js";function Ii(W){let d,k,w;return{c(){d=s("div"),k=s("pre"),w=l(`        
    `),this.h()},l(b){d=n(b,"DIV",{class:!0});var S=o(d);k=n(S,"PRE",{class:!0});var m=o(k);w=i(m,`        
    `),m.forEach(t),S.forEach(t),this.h()},h(){c(k,"class","svelte-dw01c0"),c(d,"class","mermaid")},m(b,S){r(b,d,S),a(d,k),a(k,w),W[1](k)},p:Ao,i:Ao,o:Ao,d(b){b&&t(d),W[1](null)}}}function Ti(W,d,k){let w=null;function b(S){Ei[S?"unshift":"push"](()=>{w=S,k(0,w)})}return[w,b]}class Pi extends ti{constructor(d){super(),si(this,d,Ti,Ii,ni,{})}}function qi(W){let d;return{c(){d=l(`graph LR
endpoint(Endpoint)-->client[SajeClient]
client-->queue[Queue]
queue-->worker[[Worker]]
worker-->results(Results)`)},l(k){d=i(k,`graph LR
endpoint(Endpoint)-->client[SajeClient]
client-->queue[Queue]
queue-->worker[[Worker]]
worker-->results(Results)`)},m(k,w){r(k,d,w)},d(k){k&&t(d)}}}function Oi(W){let d,k,w,b,S,m,ie,Ue,ge,Ft,Gt,pe,Ye,Se,Ut,Yt,Ve,je,Vt,Xt,Xe,Ze,xe,Zt,Kt,Ke,ea,Ae,es,as,aa,ta,Ie,ts,ss,sa,na,Te,ns,Ua,D,os,N,Pe,Ya,Q,ls,z,qe,Va,j,is,oa,ps,rs,re,la,cs,us,ia,hs,ds,Xa,B,fs,ce,ks,ws,Za,E,ms,pa,_s,vs,ra,bs,Es,ca,ys,gs,ua,Ss,js,Ka,J,xs,F,Oe,et,Le,As,at,Ce,Is,tt,_,ha,Ts,Ps,da,qs,Os,fa,Ls,Cs,ka,Ds,Qs,wa,Js,Hs,ma,Ms,st,De,Rs,nt,H,$s,G,Qe,ot,f,Ws,_a,Ns,zs,va,Bs,Fs,ba,Gs,Us,Ea,Ys,Vs,ya,Xs,Zs,ga,Ks,en,Sa,an,tn,lt,ue,oi=`<code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Manager

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>main_process_start</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span>shared_ctx<span class="token punctuation">.</span>saje_queue <span class="token operator">=</span> manager<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,it,y,sn,ja,nn,on,xa,ln,pn,Aa,rn,cn,Ia,un,hn,pt,x,dn,Ta,fn,kn,he,wn,mn,Pa,_n,vn,rt,de,li=`<code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>main_process_ready</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">ready</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>manager<span class="token punctuation">.</span>manage<span class="token punctuation">(</span>
        <span class="token string">"SajeWorker"</span><span class="token punctuation">,</span> worker<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"saje_queue"</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>shared_ctx<span class="token punctuation">.</span>saje_queue<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span></code>`,ct,g,bn,qa,En,yn,Oa,gn,Sn,La,jn,xn,Ca,An,In,ut,T,Da,Tn,Pn,Qa,qn,On,Ja,Ln,ht,U,Cn,Ha,Dn,Qn,dt,Je,Jn,ft,fe,ii=`<code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Manager
<span class="token keyword">from</span> sanic <span class="token keyword">import</span> Sanic
<span class="token keyword">from</span> saje<span class="token punctuation">.</span>worker <span class="token keyword">import</span> worker


<span class="token keyword">def</span> <span class="token function">create_saje</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>main_process_start</span>
    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span><span class="token punctuation">:</span>
        manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span>shared_ctx<span class="token punctuation">.</span>saje_queue <span class="token operator">=</span> manager<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>main_process_ready</span>
    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">ready</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span><span class="token punctuation">:</span>
        app<span class="token punctuation">.</span>manager<span class="token punctuation">.</span>manage<span class="token punctuation">(</span>
            <span class="token string">"SajeWorker"</span><span class="token punctuation">,</span> worker<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"saje_queue"</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>shared_ctx<span class="token punctuation">.</span>saje_queue<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span></code>`,kt,Y,Hn,Ma,Mn,Rn,wt,ke,pi=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>saje_queue<span class="token punctuation">:</span> Queue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>`,mt,V,$n,we,Wn,Nn,_t,M,zn,X,He,vt,Z,Bn,Ra,Fn,Gn,bt,me,ri=`<code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Queue
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any
<span class="token keyword">import</span> ujson


<span class="token keyword">class</span> <span class="token class-name">SajeClient</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">:</span> Queue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue

    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> job_definition<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>job_definition<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            message <span class="token operator">=</span> ujson<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>job_definition<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span>message<span class="token punctuation">)</span></code>`,Et,K,Un,$a,Yn,Vn,yt,_e,ci=`<code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>after_server_start</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup_saje</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>saje <span class="token operator">=</span> SajeClient<span class="token punctuation">(</span>app<span class="token punctuation">.</span>shared_ctx<span class="token punctuation">.</span>saje_queue<span class="token punctuation">)</span></code>`,gt,ee,Xn,ve,Zn,Kn,St,be,ui=`<code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>after_server_start</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup_saje</span><span class="token punctuation">(</span>app<span class="token punctuation">:</span> Sanic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>dependency<span class="token punctuation">(</span>SajeClient<span class="token punctuation">(</span>app<span class="token punctuation">.</span>shared_ctx<span class="token punctuation">.</span>saje_queue<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,jt,R,eo,ae,Me,xt,Re,ao,At,Ee,hi=`<code class="language-python"><span class="token decorator annotation punctuation">@bp<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">start_job</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> saje<span class="token punctuation">:</span> SajeClient<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> HTTPResponse<span class="token punctuation">:</span>
    uid <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    saje<span class="token punctuation">.</span>send<span class="token punctuation">(</span>
        <span class="token punctuation">&#123;</span>
            <span class="token string">"task"</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>
            <span class="token string">"uid"</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span>
            <span class="token string">"kwargs"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Adam"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span>uid<span class="token punctuation">)</span></code>`,It,$e,to,Tt,te,Pt,$,so,se,We,qt,P,no,Wa,oo,lo,ye,io,po,Ot,Ne,ro,Lt,ze,co,Ct,A,Na,uo,ho,za,fo,ko,Ba,wo,mo,Fa,_o,Dt,Be,vo,Qt;return te=new Pi({props:{$$slots:{default:[qi]},$$scope:{ctx:W}}}),{c(){d=s("h2"),k=l("Table of contents"),w=s("a"),b=s("i"),S=u(),m=s("ul"),ie=s("li"),Ue=s("p"),ge=s("a"),Ft=l("Overview of the concept"),Gt=u(),pe=s("ul"),Ye=s("li"),Se=s("a"),Ut=l("Background on SAJE"),Yt=u(),Ve=s("li"),je=s("a"),Vt=l("Solving for this with v22.9 workers"),Xt=u(),Xe=s("li"),Ze=s("p"),xe=s("a"),Zt=l("Adding a managed process"),Kt=u(),Ke=s("li"),ea=s("p"),Ae=s("a"),es=l("Sharing the queue to Sanic workers"),as=u(),aa=s("li"),ta=s("p"),Ie=s("a"),ts=l("Pushing work from an endpoint"),ss=u(),sa=s("li"),na=s("p"),Te=s("a"),ns=l("Wrap-up and next steps"),Ua=u(),D=s("h2"),os=l("Overview of the concept"),N=s("a"),Pe=s("i"),Ya=u(),Q=s("h3"),ls=l("Background on SAJE"),z=s("a"),qe=s("i"),Va=u(),j=s("p"),is=l("In my 2021 talk I proposed a solution that I called: "),oa=s("strong"),ps=l("SAJE"),rs=l(" (Sanic asynchronous job executor). The idea was to launch a background process that exposed a "),re=s("a"),la=s("code"),cs=l("multiprocessing.Queue"),us=l(". From inside of an endpoint we would push data to the queue and let the SAJE process pick it up and assign the work. The endpoint would have return some sort of an identifier. With the results and state of the execution stored "),ia=s("em"),hs=l("somewhere"),ds=l(", we could then fetch information about that job using the identifier."),Xa=u(),B=s("p"),fs=l("You can view the original source code of SAJE on "),ce=s("a"),ks=l("GitHub"),ws=l("."),Za=u(),E=s("p"),ms=l("The problem is that the solution proposed there has only limited capabilities. We are inherently limited to using only a single Sanic worker process because it attaches the SAJE runner in "),pa=s("code"),_s=l("@app.main_process_start"),vs=l(". This means that only the application instance in the main process has access to that queue. In pre-22.9 this is okay "),ra=s("strong"),bs=l("if"),Es=l(" you are not using "),ca=s("code"),ys=l("auto_reload"),gs=l(" or more than one (1) worker. This is simply an inherent limitation in how "),ua=s("code"),Ss=l("multiprocessing"),js=l(" was implemented in Sanic."),Ka=u(),J=s("h3"),xs=l("Solving for this with v22.9 workers"),F=s("a"),Oe=s("i"),et=u(),Le=s("p"),As=l("The v22.9 update to Sanic overhauled how workers operate. One of the explicit goals was to more easily allow for passing synchronization objects between workers. Another goal was to provide a framework to allow Sanic to manage arbitrary processes. Both of these concepts are what we will rely upon to create a new and improved version of SAJE."),at=u(),Ce=s("p"),Is=l("In this article, I want to show a pattern for creating a managed process and for interacting with it from inside a Sanic application. To keep things simple, I will largely leverage the existing SAJE code base linked above. Our requirements will be as follows:"),tt=u(),_=s("ul"),ha=s("li"),Ts=l("Sanic must fully manage the startup and graceful shutdown of SAJE"),Ps=u(),da=s("li"),qs=l("an endpoint must be able to submit a set of details to execute a job"),Os=u(),fa=s("li"),Ls=l("that endpoint must return an identifier to a specific job"),Cs=u(),ka=s("li"),Ds=l("the job must be fully executed in a seperate worker process to not interfere with the Sanic request lifecycle"),Qs=u(),wa=s("li"),Js=l("details about the task execution must be persisted somewhere (for now, we will use a flat file backend)"),Hs=u(),ma=s("li"),Ms=l("another endpoint must be able to retrieve details while the job is in progress and after its completion"),st=u(),De=s("p"),Rs=l("Essentially, we will be creating a miniature celery-like application inside of Sanic."),nt=u(),H=s("h2"),$s=l("Adding a managed process"),G=s("a"),Qe=s("i"),ot=u(),f=s("p"),Ws=l("To begin, we will create a "),_a=s("code"),Ns=l("Queue"),zs=l(" that will be shared across the Sanic workers and the SAJE workers. This "),va=s("code"),Bs=l("Queue"),Fs=l(" will be the tool by which Sanic and SAJE communicate with one another. Sanic allows us to share objects meant to be used in multiple processes (like a "),ba=s("code"),Gs=l("Queue"),Us=l(") by attaching them to "),Ea=s("code"),Ys=l("app.shared_ctx"),Vs=l(". The catch is that this "),ya=s("em"),Xs=l("MUST"),Zs=l(" happen in the "),ga=s("code"),Ks=l("@app.main_process_start"),en=l(" listener. This is the only time you should ever attach anything to "),Sa=s("code"),an=l("app.shared_ctx"),tn=l("."),lt=u(),ue=s("pre"),it=u(),y=s("p"),sn=l(`::: info
You should beware that only objects that are safe for sharing with `),ja=s("code"),nn=l("multiprocessing.Process"),on=l(" should be attached to "),xa=s("code"),ln=l("app.shared_ctx"),pn=l(". For example, if you attached a regular "),Aa=s("code"),rn=l("dict"),cn=l(" object, it\u2019s state "),Ia=s("strong"),un=l("will not"),hn=l(` be shared across application workers.
:::`),pt=u(),x=s("p"),dn=l("Once the "),Ta=s("code"),fn=l("Queue"),kn=l(" is setup, we can tell Sanic to "),he=s("a"),wn=l("manage a custom process"),mn=l(". This also must be done at a very specific time: the "),Pa=s("code"),_n=l("@app.main_process_ready"),vn=l(" listener."),rt=u(),de=s("pre"),ct=u(),g=s("p"),bn=l("As you can see, we are working with "),qa=s("code"),En=l("app.manager"),yn=l(". This is a special object that is only available in the main process, and only "),Oa=s("em"),gn=l("after"),Sn=u(),La=s("code"),jn=l("main_process_start"),xn=l(" has happened. That is why we can only attach a managed process in "),Ca=s("code"),An=l("main_process_ready"),In=l(". The arguments are fairly simple:"),ut=u(),T=s("ul"),Da=s("li"),Tn=l("a name for the process,"),Pn=u(),Qa=s("li"),qn=l("a callable that will be the target function of the subprocess, and"),On=u(),Ja=s("li"),Ln=l("keyword arguments for the subprocess."),ht=u(),U=s("p"),Cn=l("In our instance, the keyword arguments with be the shared "),Ha=s("code"),Dn=l("Queue"),Qn=l(" that we just setup."),dt=u(),Je=s("p"),Jn=l("Let\u2019s see it all together:"),ft=u(),fe=s("pre"),kt=u(),Y=s("p"),Hn=l("For now, don\u2019t worry too much about what "),Ma=s("code"),Mn=l("worker"),Rn=l(" is. All you need to care about right now is that it is a function that roughly lookes like this:"),wt=u(),ke=s("pre"),mt=u(),V=s("p"),$n=l("_Feel free to jump to the "),we=s("a"),Wn=l("source code"),Nn=l(" to see it in full_"),_t=u(),M=s("h2"),zn=l("Sharing the queue to Sanic workers"),X=s("a"),He=s("i"),vt=u(),Z=s("p"),Bn=l("Since the "),Ra=s("code"),Fn=l("Queue"),Gn=l(" will be the main conduit for triggering work, we need some sort of client that will be available to the Sanic workers."),bt=u(),me=s("pre"),Et=u(),K=s("p"),Un=l("The client has one job: pushing a request to execute a job to the "),$a=s("code"),Yn=l("Queue"),Vn=l(". Now all we need to do is instantiate it."),yt=u(),_e=s("pre"),gt=u(),ee=s("p"),Xn=l("We could leave it like that of course, but let\u2019s use some "),ve=s("a"),Zn=l("dependency injection"),Kn=l(" to make the experience smoother down the road."),St=u(),be=s("pre"),jt=u(),R=s("h2"),eo=l("Pushing work from an endpoint"),ae=s("a"),Me=s("i"),xt=u(),Re=s("p"),ao=l("We should be ready now to start an actual job from an endpoint. Because we used dependency injection in the previous step, our endpoint can request for the client as seen here:"),At=u(),Ee=s("pre"),It=u(),$e=s("p"),to=l("That\u2019s it. Now when we hit that endpoint and the flow will look something like this:"),Tt=u(),yi(te.$$.fragment),Pt=u(),$=s("h2"),so=l("Wrap-up and next steps"),se=s("a"),We=s("i"),qt=u(),P=s("p"),no=l("There obviously are a lot of steps here that I glossed over. The "),Wa=s("code"),oo=l("worker"),lo=l(" function mentioned above for example. I suggest you take a look at the content in the "),ye=s("a"),io=l("source code"),po=l(" to see how that works."),Ot=u(),Ne=s("p"),ro=l("Our goal here was to examine how to use the new worker manager feature in Sanic to coordinate the sharing of data from worker processes to a custom background process. Obviously, a secondary hope was to show how you could build out a robust platform to handle your own background processing needs entirely within Sanic."),Lt=u(),ze=s("p"),co=l("If I were to try to make this production ready, the things you would want to focus upon are:"),Ct=u(),A=s("ul"),Na=s("li"),uo=l("ensuring a more robust data store"),ho=u(),za=s("li"),fo=l("scaling out the job workers (a new API for this is coming in v22.12, but you can do it in v22.9)"),ko=u(),Ba=s("li"),wo=l("fault tolerance"),mo=u(),Fa=s("li"),_o=l("abstracting tools for making single and multi-stage task operations"),Dt=u(),Be=s("p"),vo=l("Armed with this information, I hope you are now excited for what could be possible."),this.h()},l(e){d=n(e,"H2",{class:!0,id:!0});var p=o(d);k=i(p,"Table of contents"),w=n(p,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ga=o(w);b=n(Ga,"I",{class:!0,"aria-hidden":!0}),o(b).forEach(t),Ga.forEach(t),p.forEach(t),S=h(e),m=n(e,"UL",{});var q=o(m);ie=n(q,"LI",{});var Jt=o(ie);Ue=n(Jt,"P",{});var Io=o(Ue);ge=n(Io,"A",{href:!0});var To=o(ge);Ft=i(To,"Overview of the concept"),To.forEach(t),Io.forEach(t),Gt=h(Jt),pe=n(Jt,"UL",{});var Ht=o(pe);Ye=n(Ht,"LI",{});var Po=o(Ye);Se=n(Po,"A",{href:!0});var qo=o(Se);Ut=i(qo,"Background on SAJE"),qo.forEach(t),Po.forEach(t),Yt=h(Ht),Ve=n(Ht,"LI",{});var Oo=o(Ve);je=n(Oo,"A",{href:!0});var Lo=o(je);Vt=i(Lo,"Solving for this with v22.9 workers"),Lo.forEach(t),Oo.forEach(t),Ht.forEach(t),Jt.forEach(t),Xt=h(q),Xe=n(q,"LI",{});var Co=o(Xe);Ze=n(Co,"P",{});var Do=o(Ze);xe=n(Do,"A",{href:!0});var Qo=o(xe);Zt=i(Qo,"Adding a managed process"),Qo.forEach(t),Do.forEach(t),Co.forEach(t),Kt=h(q),Ke=n(q,"LI",{});var Jo=o(Ke);ea=n(Jo,"P",{});var Ho=o(ea);Ae=n(Ho,"A",{href:!0});var Mo=o(Ae);es=i(Mo,"Sharing the queue to Sanic workers"),Mo.forEach(t),Ho.forEach(t),Jo.forEach(t),as=h(q),aa=n(q,"LI",{});var Ro=o(aa);ta=n(Ro,"P",{});var $o=o(ta);Ie=n($o,"A",{href:!0});var Wo=o(Ie);ts=i(Wo,"Pushing work from an endpoint"),Wo.forEach(t),$o.forEach(t),Ro.forEach(t),ss=h(q),sa=n(q,"LI",{});var No=o(sa);na=n(No,"P",{});var zo=o(na);Te=n(zo,"A",{href:!0});var Bo=o(Te);ns=i(Bo,"Wrap-up and next steps"),Bo.forEach(t),zo.forEach(t),No.forEach(t),q.forEach(t),Ua=h(e),D=n(e,"H2",{class:!0,id:!0});var bo=o(D);os=i(bo,"Overview of the concept"),N=n(bo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fo=o(N);Pe=n(Fo,"I",{class:!0,"aria-hidden":!0}),o(Pe).forEach(t),Fo.forEach(t),bo.forEach(t),Ya=h(e),Q=n(e,"H3",{class:!0,id:!0});var Eo=o(Q);ls=i(Eo,"Background on SAJE"),z=n(Eo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Go=o(z);qe=n(Go,"I",{class:!0,"aria-hidden":!0}),o(qe).forEach(t),Go.forEach(t),Eo.forEach(t),Va=h(e),j=n(e,"P",{});var ne=o(j);is=i(ne,"In my 2021 talk I proposed a solution that I called: "),oa=n(ne,"STRONG",{});var Uo=o(oa);ps=i(Uo,"SAJE"),Uo.forEach(t),rs=i(ne," (Sanic asynchronous job executor). The idea was to launch a background process that exposed a "),re=n(ne,"A",{href:!0,rel:!0});var Yo=o(re);la=n(Yo,"CODE",{});var Vo=o(la);cs=i(Vo,"multiprocessing.Queue"),Vo.forEach(t),Yo.forEach(t),us=i(ne,". From inside of an endpoint we would push data to the queue and let the SAJE process pick it up and assign the work. The endpoint would have return some sort of an identifier. With the results and state of the execution stored "),ia=n(ne,"EM",{});var Xo=o(ia);hs=i(Xo,"somewhere"),Xo.forEach(t),ds=i(ne,", we could then fetch information about that job using the identifier."),ne.forEach(t),Xa=h(e),B=n(e,"P",{});var Mt=o(B);fs=i(Mt,"You can view the original source code of SAJE on "),ce=n(Mt,"A",{href:!0,rel:!0});var Zo=o(ce);ks=i(Zo,"GitHub"),Zo.forEach(t),ws=i(Mt,"."),Mt.forEach(t),Za=h(e),E=n(e,"P",{});var O=o(E);ms=i(O,"The problem is that the solution proposed there has only limited capabilities. We are inherently limited to using only a single Sanic worker process because it attaches the SAJE runner in "),pa=n(O,"CODE",{});var Ko=o(pa);_s=i(Ko,"@app.main_process_start"),Ko.forEach(t),vs=i(O,". This means that only the application instance in the main process has access to that queue. In pre-22.9 this is okay "),ra=n(O,"STRONG",{});var el=o(ra);bs=i(el,"if"),el.forEach(t),Es=i(O," you are not using "),ca=n(O,"CODE",{});var al=o(ca);ys=i(al,"auto_reload"),al.forEach(t),gs=i(O," or more than one (1) worker. This is simply an inherent limitation in how "),ua=n(O,"CODE",{});var tl=o(ua);Ss=i(tl,"multiprocessing"),tl.forEach(t),js=i(O," was implemented in Sanic."),O.forEach(t),Ka=h(e),J=n(e,"H3",{class:!0,id:!0});var yo=o(J);xs=i(yo,"Solving for this with v22.9 workers"),F=n(yo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sl=o(F);Oe=n(sl,"I",{class:!0,"aria-hidden":!0}),o(Oe).forEach(t),sl.forEach(t),yo.forEach(t),et=h(e),Le=n(e,"P",{});var nl=o(Le);As=i(nl,"The v22.9 update to Sanic overhauled how workers operate. One of the explicit goals was to more easily allow for passing synchronization objects between workers. Another goal was to provide a framework to allow Sanic to manage arbitrary processes. Both of these concepts are what we will rely upon to create a new and improved version of SAJE."),nl.forEach(t),at=h(e),Ce=n(e,"P",{});var ol=o(Ce);Is=i(ol,"In this article, I want to show a pattern for creating a managed process and for interacting with it from inside a Sanic application. To keep things simple, I will largely leverage the existing SAJE code base linked above. Our requirements will be as follows:"),ol.forEach(t),tt=h(e),_=n(e,"UL",{});var I=o(_);ha=n(I,"LI",{});var ll=o(ha);Ts=i(ll,"Sanic must fully manage the startup and graceful shutdown of SAJE"),ll.forEach(t),Ps=h(I),da=n(I,"LI",{});var il=o(da);qs=i(il,"an endpoint must be able to submit a set of details to execute a job"),il.forEach(t),Os=h(I),fa=n(I,"LI",{});var pl=o(fa);Ls=i(pl,"that endpoint must return an identifier to a specific job"),pl.forEach(t),Cs=h(I),ka=n(I,"LI",{});var rl=o(ka);Ds=i(rl,"the job must be fully executed in a seperate worker process to not interfere with the Sanic request lifecycle"),rl.forEach(t),Qs=h(I),wa=n(I,"LI",{});var cl=o(wa);Js=i(cl,"details about the task execution must be persisted somewhere (for now, we will use a flat file backend)"),cl.forEach(t),Hs=h(I),ma=n(I,"LI",{});var ul=o(ma);Ms=i(ul,"another endpoint must be able to retrieve details while the job is in progress and after its completion"),ul.forEach(t),I.forEach(t),st=h(e),De=n(e,"P",{});var hl=o(De);Rs=i(hl,"Essentially, we will be creating a miniature celery-like application inside of Sanic."),hl.forEach(t),nt=h(e),H=n(e,"H2",{class:!0,id:!0});var go=o(H);$s=i(go,"Adding a managed process"),G=n(go,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dl=o(G);Qe=n(dl,"I",{class:!0,"aria-hidden":!0}),o(Qe).forEach(t),dl.forEach(t),go.forEach(t),ot=h(e),f=n(e,"P",{});var v=o(f);Ws=i(v,"To begin, we will create a "),_a=n(v,"CODE",{});var fl=o(_a);Ns=i(fl,"Queue"),fl.forEach(t),zs=i(v," that will be shared across the Sanic workers and the SAJE workers. This "),va=n(v,"CODE",{});var kl=o(va);Bs=i(kl,"Queue"),kl.forEach(t),Fs=i(v," will be the tool by which Sanic and SAJE communicate with one another. Sanic allows us to share objects meant to be used in multiple processes (like a "),ba=n(v,"CODE",{});var wl=o(ba);Gs=i(wl,"Queue"),wl.forEach(t),Us=i(v,") by attaching them to "),Ea=n(v,"CODE",{});var ml=o(Ea);Ys=i(ml,"app.shared_ctx"),ml.forEach(t),Vs=i(v,". The catch is that this "),ya=n(v,"EM",{});var _l=o(ya);Xs=i(_l,"MUST"),_l.forEach(t),Zs=i(v," happen in the "),ga=n(v,"CODE",{});var vl=o(ga);Ks=i(vl,"@app.main_process_start"),vl.forEach(t),en=i(v," listener. This is the only time you should ever attach anything to "),Sa=n(v,"CODE",{});var bl=o(Sa);an=i(bl,"app.shared_ctx"),bl.forEach(t),tn=i(v,"."),v.forEach(t),lt=h(e),ue=n(e,"PRE",{class:!0});var di=o(ue);di.forEach(t),it=h(e),y=n(e,"P",{});var L=o(y);sn=i(L,`::: info
You should beware that only objects that are safe for sharing with `),ja=n(L,"CODE",{});var El=o(ja);nn=i(El,"multiprocessing.Process"),El.forEach(t),on=i(L," should be attached to "),xa=n(L,"CODE",{});var yl=o(xa);ln=i(yl,"app.shared_ctx"),yl.forEach(t),pn=i(L,". For example, if you attached a regular "),Aa=n(L,"CODE",{});var gl=o(Aa);rn=i(gl,"dict"),gl.forEach(t),cn=i(L," object, it\u2019s state "),Ia=n(L,"STRONG",{});var Sl=o(Ia);un=i(Sl,"will not"),Sl.forEach(t),hn=i(L,` be shared across application workers.
:::`),L.forEach(t),pt=h(e),x=n(e,"P",{});var oe=o(x);dn=i(oe,"Once the "),Ta=n(oe,"CODE",{});var jl=o(Ta);fn=i(jl,"Queue"),jl.forEach(t),kn=i(oe," is setup, we can tell Sanic to "),he=n(oe,"A",{href:!0,rel:!0});var xl=o(he);wn=i(xl,"manage a custom process"),xl.forEach(t),mn=i(oe,". This also must be done at a very specific time: the "),Pa=n(oe,"CODE",{});var Al=o(Pa);_n=i(Al,"@app.main_process_ready"),Al.forEach(t),vn=i(oe," listener."),oe.forEach(t),rt=h(e),de=n(e,"PRE",{class:!0});var fi=o(de);fi.forEach(t),ct=h(e),g=n(e,"P",{});var C=o(g);bn=i(C,"As you can see, we are working with "),qa=n(C,"CODE",{});var Il=o(qa);En=i(Il,"app.manager"),Il.forEach(t),yn=i(C,". This is a special object that is only available in the main process, and only "),Oa=n(C,"EM",{});var Tl=o(Oa);gn=i(Tl,"after"),Tl.forEach(t),Sn=h(C),La=n(C,"CODE",{});var Pl=o(La);jn=i(Pl,"main_process_start"),Pl.forEach(t),xn=i(C," has happened. That is why we can only attach a managed process in "),Ca=n(C,"CODE",{});var ql=o(Ca);An=i(ql,"main_process_ready"),ql.forEach(t),In=i(C,". The arguments are fairly simple:"),C.forEach(t),ut=h(e),T=n(e,"UL",{});var Fe=o(T);Da=n(Fe,"LI",{});var Ol=o(Da);Tn=i(Ol,"a name for the process,"),Ol.forEach(t),Pn=h(Fe),Qa=n(Fe,"LI",{});var Ll=o(Qa);qn=i(Ll,"a callable that will be the target function of the subprocess, and"),Ll.forEach(t),On=h(Fe),Ja=n(Fe,"LI",{});var Cl=o(Ja);Ln=i(Cl,"keyword arguments for the subprocess."),Cl.forEach(t),Fe.forEach(t),ht=h(e),U=n(e,"P",{});var Rt=o(U);Cn=i(Rt,"In our instance, the keyword arguments with be the shared "),Ha=n(Rt,"CODE",{});var Dl=o(Ha);Dn=i(Dl,"Queue"),Dl.forEach(t),Qn=i(Rt," that we just setup."),Rt.forEach(t),dt=h(e),Je=n(e,"P",{});var Ql=o(Je);Jn=i(Ql,"Let\u2019s see it all together:"),Ql.forEach(t),ft=h(e),fe=n(e,"PRE",{class:!0});var ki=o(fe);ki.forEach(t),kt=h(e),Y=n(e,"P",{});var $t=o(Y);Hn=i($t,"For now, don\u2019t worry too much about what "),Ma=n($t,"CODE",{});var Jl=o(Ma);Mn=i(Jl,"worker"),Jl.forEach(t),Rn=i($t," is. All you need to care about right now is that it is a function that roughly lookes like this:"),$t.forEach(t),wt=h(e),ke=n(e,"PRE",{class:!0});var wi=o(ke);wi.forEach(t),mt=h(e),V=n(e,"P",{});var Wt=o(V);$n=i(Wt,"_Feel free to jump to the "),we=n(Wt,"A",{href:!0,rel:!0});var Hl=o(we);Wn=i(Hl,"source code"),Hl.forEach(t),Nn=i(Wt," to see it in full_"),Wt.forEach(t),_t=h(e),M=n(e,"H2",{class:!0,id:!0});var So=o(M);zn=i(So,"Sharing the queue to Sanic workers"),X=n(So,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ml=o(X);He=n(Ml,"I",{class:!0,"aria-hidden":!0}),o(He).forEach(t),Ml.forEach(t),So.forEach(t),vt=h(e),Z=n(e,"P",{});var Nt=o(Z);Bn=i(Nt,"Since the "),Ra=n(Nt,"CODE",{});var Rl=o(Ra);Fn=i(Rl,"Queue"),Rl.forEach(t),Gn=i(Nt," will be the main conduit for triggering work, we need some sort of client that will be available to the Sanic workers."),Nt.forEach(t),bt=h(e),me=n(e,"PRE",{class:!0});var mi=o(me);mi.forEach(t),Et=h(e),K=n(e,"P",{});var zt=o(K);Un=i(zt,"The client has one job: pushing a request to execute a job to the "),$a=n(zt,"CODE",{});var $l=o($a);Yn=i($l,"Queue"),$l.forEach(t),Vn=i(zt,". Now all we need to do is instantiate it."),zt.forEach(t),yt=h(e),_e=n(e,"PRE",{class:!0});var _i=o(_e);_i.forEach(t),gt=h(e),ee=n(e,"P",{});var Bt=o(ee);Xn=i(Bt,"We could leave it like that of course, but let\u2019s use some "),ve=n(Bt,"A",{href:!0,rel:!0});var Wl=o(ve);Zn=i(Wl,"dependency injection"),Wl.forEach(t),Kn=i(Bt," to make the experience smoother down the road."),Bt.forEach(t),St=h(e),be=n(e,"PRE",{class:!0});var vi=o(be);vi.forEach(t),jt=h(e),R=n(e,"H2",{class:!0,id:!0});var jo=o(R);eo=i(jo,"Pushing work from an endpoint"),ae=n(jo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nl=o(ae);Me=n(Nl,"I",{class:!0,"aria-hidden":!0}),o(Me).forEach(t),Nl.forEach(t),jo.forEach(t),xt=h(e),Re=n(e,"P",{});var zl=o(Re);ao=i(zl,"We should be ready now to start an actual job from an endpoint. Because we used dependency injection in the previous step, our endpoint can request for the client as seen here:"),zl.forEach(t),At=h(e),Ee=n(e,"PRE",{class:!0});var bi=o(Ee);bi.forEach(t),It=h(e),$e=n(e,"P",{});var Bl=o($e);to=i(Bl,"That\u2019s it. Now when we hit that endpoint and the flow will look something like this:"),Bl.forEach(t),Tt=h(e),gi(te.$$.fragment,e),Pt=h(e),$=n(e,"H2",{class:!0,id:!0});var xo=o($);so=i(xo,"Wrap-up and next steps"),se=n(xo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fl=o(se);We=n(Fl,"I",{class:!0,"aria-hidden":!0}),o(We).forEach(t),Fl.forEach(t),xo.forEach(t),qt=h(e),P=n(e,"P",{});var Ge=o(P);no=i(Ge,"There obviously are a lot of steps here that I glossed over. The "),Wa=n(Ge,"CODE",{});var Gl=o(Wa);oo=i(Gl,"worker"),Gl.forEach(t),lo=i(Ge," function mentioned above for example. I suggest you take a look at the content in the "),ye=n(Ge,"A",{href:!0,rel:!0});var Ul=o(ye);io=i(Ul,"source code"),Ul.forEach(t),po=i(Ge," to see how that works."),Ge.forEach(t),Ot=h(e),Ne=n(e,"P",{});var Yl=o(Ne);ro=i(Yl,"Our goal here was to examine how to use the new worker manager feature in Sanic to coordinate the sharing of data from worker processes to a custom background process. Obviously, a secondary hope was to show how you could build out a robust platform to handle your own background processing needs entirely within Sanic."),Yl.forEach(t),Lt=h(e),ze=n(e,"P",{});var Vl=o(ze);co=i(Vl,"If I were to try to make this production ready, the things you would want to focus upon are:"),Vl.forEach(t),Ct=h(e),A=n(e,"UL",{});var le=o(A);Na=n(le,"LI",{});var Xl=o(Na);uo=i(Xl,"ensuring a more robust data store"),Xl.forEach(t),ho=h(le),za=n(le,"LI",{});var Zl=o(za);fo=i(Zl,"scaling out the job workers (a new API for this is coming in v22.12, but you can do it in v22.9)"),Zl.forEach(t),ko=h(le),Ba=n(le,"LI",{});var Kl=o(Ba);wo=i(Kl,"fault tolerance"),Kl.forEach(t),mo=h(le),Fa=n(le,"LI",{});var ei=o(Fa);_o=i(ei,"abstracting tools for making single and multi-stage task operations"),ei.forEach(t),le.forEach(t),Dt=h(e),Be=n(e,"P",{});var ai=o(Be);vo=i(ai,"Armed with this information, I hope you are now excited for what could be possible."),ai.forEach(t),this.h()},h(){c(b,"class","las la-link"),c(b,"aria-hidden","true"),c(w,"aria-hidden","true"),c(w,"tabindex","-1"),c(w,"href","#table-of-contents"),c(d,"class","is-size-2"),c(d,"id","table-of-contents"),c(ge,"href","#overview-of-the-concept"),c(Se,"href","#background-on-saje"),c(je,"href","#solving-for-this-with-v229-workers"),c(xe,"href","#adding-a-managed-process"),c(Ae,"href","#sharing-the-queue-to-sanic-workers"),c(Ie,"href","#pushing-work-from-an-endpoint"),c(Te,"href","#wrap-up-and-next-steps"),c(Pe,"class","las la-link"),c(Pe,"aria-hidden","true"),c(N,"aria-hidden","true"),c(N,"tabindex","-1"),c(N,"href","#overview-of-the-concept"),c(D,"class","is-size-2"),c(D,"id","overview-of-the-concept"),c(qe,"class","las la-link"),c(qe,"aria-hidden","true"),c(z,"aria-hidden","true"),c(z,"tabindex","-1"),c(z,"href","#background-on-saje"),c(Q,"class","is-size-3"),c(Q,"id","background-on-saje"),c(re,"href","https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue"),c(re,"rel","nofollow"),c(ce,"href","https://github.com/ahopkins/pyconil2021-liberate-your-api/tree/main/saje_project/breakpoints/bp3/saje_project/src"),c(ce,"rel","nofollow"),c(Oe,"class","las la-link"),c(Oe,"aria-hidden","true"),c(F,"aria-hidden","true"),c(F,"tabindex","-1"),c(F,"href","#solving-for-this-with-v229-workers"),c(J,"class","is-size-3"),c(J,"id","solving-for-this-with-v229-workers"),c(Qe,"class","las la-link"),c(Qe,"aria-hidden","true"),c(G,"aria-hidden","true"),c(G,"tabindex","-1"),c(G,"href","#adding-a-managed-process"),c(H,"class","is-size-2"),c(H,"id","adding-a-managed-process"),c(ue,"class","language-python"),c(he,"href","https://sanic.dev/en/guide/deployment/manager.html#running-custom-processes"),c(he,"rel","nofollow"),c(de,"class","language-python"),c(fe,"class","language-python"),c(ke,"class","language-python"),c(we,"href","https://github.com/ahopkins/personal-site/tree/main/src/background-job-worker"),c(we,"rel","nofollow"),c(He,"class","las la-link"),c(He,"aria-hidden","true"),c(X,"aria-hidden","true"),c(X,"tabindex","-1"),c(X,"href","#sharing-the-queue-to-sanic-workers"),c(M,"class","is-size-2"),c(M,"id","sharing-the-queue-to-sanic-workers"),c(me,"class","language-python"),c(_e,"class","language-python"),c(ve,"href","https://sanic.dev/en/plugins/sanic-ext/injection.html#injecting-services"),c(ve,"rel","nofollow"),c(be,"class","language-python"),c(Me,"class","las la-link"),c(Me,"aria-hidden","true"),c(ae,"aria-hidden","true"),c(ae,"tabindex","-1"),c(ae,"href","#pushing-work-from-an-endpoint"),c(R,"class","is-size-2"),c(R,"id","pushing-work-from-an-endpoint"),c(Ee,"class","language-python"),c(We,"class","las la-link"),c(We,"aria-hidden","true"),c(se,"aria-hidden","true"),c(se,"tabindex","-1"),c(se,"href","#wrap-up-and-next-steps"),c($,"class","is-size-2"),c($,"id","wrap-up-and-next-steps"),c(ye,"href","https://github.com/ahopkins/personal-site/tree/main/src/background-job-worker"),c(ye,"rel","nofollow")},m(e,p){r(e,d,p),a(d,k),a(d,w),a(w,b),r(e,S,p),r(e,m,p),a(m,ie),a(ie,Ue),a(Ue,ge),a(ge,Ft),a(ie,Gt),a(ie,pe),a(pe,Ye),a(Ye,Se),a(Se,Ut),a(pe,Yt),a(pe,Ve),a(Ve,je),a(je,Vt),a(m,Xt),a(m,Xe),a(Xe,Ze),a(Ze,xe),a(xe,Zt),a(m,Kt),a(m,Ke),a(Ke,ea),a(ea,Ae),a(Ae,es),a(m,as),a(m,aa),a(aa,ta),a(ta,Ie),a(Ie,ts),a(m,ss),a(m,sa),a(sa,na),a(na,Te),a(Te,ns),r(e,Ua,p),r(e,D,p),a(D,os),a(D,N),a(N,Pe),r(e,Ya,p),r(e,Q,p),a(Q,ls),a(Q,z),a(z,qe),r(e,Va,p),r(e,j,p),a(j,is),a(j,oa),a(oa,ps),a(j,rs),a(j,re),a(re,la),a(la,cs),a(j,us),a(j,ia),a(ia,hs),a(j,ds),r(e,Xa,p),r(e,B,p),a(B,fs),a(B,ce),a(ce,ks),a(B,ws),r(e,Za,p),r(e,E,p),a(E,ms),a(E,pa),a(pa,_s),a(E,vs),a(E,ra),a(ra,bs),a(E,Es),a(E,ca),a(ca,ys),a(E,gs),a(E,ua),a(ua,Ss),a(E,js),r(e,Ka,p),r(e,J,p),a(J,xs),a(J,F),a(F,Oe),r(e,et,p),r(e,Le,p),a(Le,As),r(e,at,p),r(e,Ce,p),a(Ce,Is),r(e,tt,p),r(e,_,p),a(_,ha),a(ha,Ts),a(_,Ps),a(_,da),a(da,qs),a(_,Os),a(_,fa),a(fa,Ls),a(_,Cs),a(_,ka),a(ka,Ds),a(_,Qs),a(_,wa),a(wa,Js),a(_,Hs),a(_,ma),a(ma,Ms),r(e,st,p),r(e,De,p),a(De,Rs),r(e,nt,p),r(e,H,p),a(H,$s),a(H,G),a(G,Qe),r(e,ot,p),r(e,f,p),a(f,Ws),a(f,_a),a(_a,Ns),a(f,zs),a(f,va),a(va,Bs),a(f,Fs),a(f,ba),a(ba,Gs),a(f,Us),a(f,Ea),a(Ea,Ys),a(f,Vs),a(f,ya),a(ya,Xs),a(f,Zs),a(f,ga),a(ga,Ks),a(f,en),a(f,Sa),a(Sa,an),a(f,tn),r(e,lt,p),r(e,ue,p),ue.innerHTML=oi,r(e,it,p),r(e,y,p),a(y,sn),a(y,ja),a(ja,nn),a(y,on),a(y,xa),a(xa,ln),a(y,pn),a(y,Aa),a(Aa,rn),a(y,cn),a(y,Ia),a(Ia,un),a(y,hn),r(e,pt,p),r(e,x,p),a(x,dn),a(x,Ta),a(Ta,fn),a(x,kn),a(x,he),a(he,wn),a(x,mn),a(x,Pa),a(Pa,_n),a(x,vn),r(e,rt,p),r(e,de,p),de.innerHTML=li,r(e,ct,p),r(e,g,p),a(g,bn),a(g,qa),a(qa,En),a(g,yn),a(g,Oa),a(Oa,gn),a(g,Sn),a(g,La),a(La,jn),a(g,xn),a(g,Ca),a(Ca,An),a(g,In),r(e,ut,p),r(e,T,p),a(T,Da),a(Da,Tn),a(T,Pn),a(T,Qa),a(Qa,qn),a(T,On),a(T,Ja),a(Ja,Ln),r(e,ht,p),r(e,U,p),a(U,Cn),a(U,Ha),a(Ha,Dn),a(U,Qn),r(e,dt,p),r(e,Je,p),a(Je,Jn),r(e,ft,p),r(e,fe,p),fe.innerHTML=ii,r(e,kt,p),r(e,Y,p),a(Y,Hn),a(Y,Ma),a(Ma,Mn),a(Y,Rn),r(e,wt,p),r(e,ke,p),ke.innerHTML=pi,r(e,mt,p),r(e,V,p),a(V,$n),a(V,we),a(we,Wn),a(V,Nn),r(e,_t,p),r(e,M,p),a(M,zn),a(M,X),a(X,He),r(e,vt,p),r(e,Z,p),a(Z,Bn),a(Z,Ra),a(Ra,Fn),a(Z,Gn),r(e,bt,p),r(e,me,p),me.innerHTML=ri,r(e,Et,p),r(e,K,p),a(K,Un),a(K,$a),a($a,Yn),a(K,Vn),r(e,yt,p),r(e,_e,p),_e.innerHTML=ci,r(e,gt,p),r(e,ee,p),a(ee,Xn),a(ee,ve),a(ve,Zn),a(ee,Kn),r(e,St,p),r(e,be,p),be.innerHTML=ui,r(e,jt,p),r(e,R,p),a(R,eo),a(R,ae),a(ae,Me),r(e,xt,p),r(e,Re,p),a(Re,ao),r(e,At,p),r(e,Ee,p),Ee.innerHTML=hi,r(e,It,p),r(e,$e,p),a($e,to),r(e,Tt,p),Si(te,e,p),r(e,Pt,p),r(e,$,p),a($,so),a($,se),a(se,We),r(e,qt,p),r(e,P,p),a(P,no),a(P,Wa),a(Wa,oo),a(P,lo),a(P,ye),a(ye,io),a(P,po),r(e,Ot,p),r(e,Ne,p),a(Ne,ro),r(e,Lt,p),r(e,ze,p),a(ze,co),r(e,Ct,p),r(e,A,p),a(A,Na),a(Na,uo),a(A,ho),a(A,za),a(za,fo),a(A,ko),a(A,Ba),a(Ba,wo),a(A,mo),a(A,Fa),a(Fa,_o),r(e,Dt,p),r(e,Be,p),a(Be,vo),Qt=!0},p(e,[p]){const Ga={};p&1&&(Ga.$$scope={dirty:p,ctx:e}),te.$set(Ga)},i(e){Qt||(ji(te.$$.fragment,e),Qt=!0)},o(e){xi(te.$$.fragment,e),Qt=!1},d(e){e&&t(d),e&&t(S),e&&t(m),e&&t(Ua),e&&t(D),e&&t(Ya),e&&t(Q),e&&t(Va),e&&t(j),e&&t(Xa),e&&t(B),e&&t(Za),e&&t(E),e&&t(Ka),e&&t(J),e&&t(et),e&&t(Le),e&&t(at),e&&t(Ce),e&&t(tt),e&&t(_),e&&t(st),e&&t(De),e&&t(nt),e&&t(H),e&&t(ot),e&&t(f),e&&t(lt),e&&t(ue),e&&t(it),e&&t(y),e&&t(pt),e&&t(x),e&&t(rt),e&&t(de),e&&t(ct),e&&t(g),e&&t(ut),e&&t(T),e&&t(ht),e&&t(U),e&&t(dt),e&&t(Je),e&&t(ft),e&&t(fe),e&&t(kt),e&&t(Y),e&&t(wt),e&&t(ke),e&&t(mt),e&&t(V),e&&t(_t),e&&t(M),e&&t(vt),e&&t(Z),e&&t(bt),e&&t(me),e&&t(Et),e&&t(K),e&&t(yt),e&&t(_e),e&&t(gt),e&&t(ee),e&&t(St),e&&t(be),e&&t(jt),e&&t(R),e&&t(xt),e&&t(Re),e&&t(At),e&&t(Ee),e&&t(It),e&&t($e),e&&t(Tt),Ai(te,e),e&&t(Pt),e&&t($),e&&t(qt),e&&t(P),e&&t(Ot),e&&t(Ne),e&&t(Lt),e&&t(ze),e&&t(Ct),e&&t(A),e&&t(Dt),e&&t(Be)}}}const Ci={date:"2022-10-09T00:00:00.000Z",tag:["Sanic","tutorial"],title:"Pushing work to the background of your Sanic app",description:"Get up and running with a background job worker entirely in Sanic"};class Di extends ti{constructor(d){super(),si(this,d,null,Oi,ni,{})}}export{Di as default,Ci as metadata};
